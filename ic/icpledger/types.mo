// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
module T {
    public type Tokens = { e8s : Nat64 };
    public type TimeStamp = { timestamp_nanos : Nat64 };
    public type AccountIdentifier = Blob;
    public type SubAccount = Blob;
    public type BlockIndex = Nat64;
    public type Transaction = { memo : T.Memo; icrc1_memo : ?Blob; operation : ?T.Operation; created_at_time : T.TimeStamp };
    public type Memo = Nat64;
    public type TransferArgs = { memo : T.Memo; amount : T.Tokens; fee : T.Tokens; from_subaccount : ?T.SubAccount; to : T.AccountIdentifier; created_at_time : ?T.TimeStamp };
    public type TransferError = { #BadFee : { expected_fee : T.Tokens }; #InsufficientFunds : { balance : T.Tokens }; #TxTooOld : { allowed_window_nanos : Nat64 }; #TxCreatedInFuture : (); #TxDuplicate : { duplicate_of : T.BlockIndex } };
    public type TransferResult = { #Ok : T.BlockIndex; #Err : T.TransferError };
    public type AccountBalanceArgs = { account : T.AccountIdentifier };
    public type TransferFeeArg = {  };
    public type TransferFee = { transfer_fee : T.Tokens };
    public type GetBlocksArgs = { start : T.BlockIndex; length : Nat64 };
    public type Operation = { #Mint : { to : T.AccountIdentifier; amount : T.Tokens }; #Burn : { from : T.AccountIdentifier; amount : T.Tokens }; #Transfer : { from : T.AccountIdentifier; to : T.AccountIdentifier; amount : T.Tokens; fee : T.Tokens }; #Approve : { from : T.AccountIdentifier; spender : T.AccountIdentifier; allowance_e8s : Int; fee : T.Tokens; expires_at : ?T.TimeStamp }; #TransferFrom : { from : T.AccountIdentifier; to : T.AccountIdentifier; spender : T.AccountIdentifier; amount : T.Tokens; fee : T.Tokens } };
    public type Block = { parent_hash : ?Blob; transaction : T.Transaction; timestamp : T.TimeStamp };
    public type BlockRange = { blocks : [T.Block] };
    public type QueryArchiveError = { #BadFirstBlockIndex : { requested_index : T.BlockIndex; first_valid_index : T.BlockIndex }; #Other : { error_code : Nat64; error_message : Text } };
    public type QueryArchiveResult = { #Ok : T.BlockRange; #Err : T.QueryArchiveError };
    public type QueryArchiveFn = { /* func */ };
    public type QueryBlocksResponse = { chain_length : Nat64; certificate : ?Blob; blocks : [T.Block]; first_block_index : T.BlockIndex; archived_blocks : [{ start : T.BlockIndex; length : Nat64; callback : T.QueryArchiveFn }] };
    public type Archive = { canister_id : Principal };
    public type Archives = { archives : [T.Archive] };
};
